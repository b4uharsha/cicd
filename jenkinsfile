pipeline {
    agent any

    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('gcp-service-account')
        GCP_PROJECT = 'testcicd-436812'
    }

    stages {
        stage('Activate GCP Service Account') {
            steps {
                script {
                    sh '''
                        echo "Activating GCP service account"
                        gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
                        gcloud projects describe $GCP_PROJECT || { echo "Failed to activate service account"; exit 1; }
                    '''
                }
            }
        }

        stage('Ansible Setup') {
            steps {
                script {
                    dir("${env.WORKSPACE}/ansible") {
                        // Check if Ansible is installed
                        sh '''
                            command -v ansible > /dev/null 2>&1 || { echo "Ansible not found. Please install Ansible."; exit 1; }
                        '''

                        // Check if Google Cloud Ansible collection is installed
                        sh '''
                            ansible-galaxy collection list | grep "google.cloud" > /dev/null 2>&1 || {
                                echo "Google Cloud Ansible collection not found. Installing now..."
                                if [ ! -f requirements.yml ]; then
                                    echo "---" > requirements.yml
                                    echo "collections:" >> requirements.yml
                                    echo "  - name: google.cloud" >> requirements.yml
                                    echo "    version: 1.0.2" >> requirements.yml
                                fi
                                ansible-galaxy install -r requirements.yml --force --ignore-errors || { echo "Failed to install Ansible dependencies"; exit 1; }
                            }
                        '''
                    }
                }
            }
        }

        stage('Run BigQuery Operations with Ansible') {
            steps {
                script {
                    dir("${env.WORKSPACE}/ansible") {
                        sh '''
                            echo "Running Ansible playbook for BigQuery operations"
                            ansible-playbook -i inventory/staging/hosts.yml playbook.yml --tags "bq_operations" -vvv || { echo "Ansible BigQuery operations failed"; exit 1; }
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }

        success {
            echo 'Pipeline completed successfully.'
        }

        failure {
            echo 'Pipeline failed. Check the logs for details.'
        }
    }
}